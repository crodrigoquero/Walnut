@model Walnut.Entities.Interview
@using Walnut.Extensions
@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Candidate Interview</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @*<div class="form-group">
            @Html.LabelFor(model => model.CandidateId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CandidateId, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CandidateId, "", new { @class = "text-danger" })
            </div>
        </div>*@

        <div class="form-group">
            @Html.LabelFor(model => model.Candidates, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(
                model => model.CandidateId,
                Model.Candidates.ToSelectListItem(Model.CandidateId),
                "Please select",
                new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CandidateId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.InterviewStartDateAndTime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.InterviewStartDateAndTime, new { htmlAttributes = new { @class = "form-control", @type = "text" } })
                @Html.ValidationMessageFor(model => model.InterviewStartDateAndTime, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DurationInMin, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DurationInMin, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DurationInMin, "", new { @class = "text-danger" })
            </div>
        </div>

        @*<div class="form-group">
            @Html.LabelFor(model => model.InterviewEndDateAndTime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.InterviewEndDateAndTime, new { htmlAttributes = new { @class = "form-control", @type = "text" } })
                @Html.ValidationMessageFor(model => model.InterviewEndDateAndTime, "", new { @class = "text-danger" })
            </div>
        </div>*@

        @*<div class="form-group">
            @Html.LabelFor(model => model.InterviewNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.InterviewNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.InterviewNumber, "", new { @class = "text-danger" })
            </div>
        </div>*@

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
<script type="text/javascript">

    $('#InterviewStartDateAndTime').datetimepicker({
        format: 'd.m.Y H:i',
        minDate: '+1970/01/02',//tomorrow is minium date calendar
        allowTimes: [
            '11:00', '13:00', '15:00'
        ],
        disabledDates: ['2019/08/29', '2019/09/18'] //it works, but be careful with the date format (reverse)
    });

</script>
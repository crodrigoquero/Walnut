@model Walnut.Entities.ProcessTaskTemplate
@using Walnut.Extensions
@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
<div class="form-horizontal">
    <h4>Process Task</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.Id)

    <div class="form-group">
        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
        </div>
    </div>

    @*<div class="form-group">
            @Html.LabelFor(model => model.ProcessStageId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ProcessStageId, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ProcessStageId, "", new { @class = "text-danger" })
            </div>
        </div>*@

    <div class="form-group">
        @Html.LabelFor(model => model.Processes, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(
                    model => model.ProcessId,
                    Model.Processes.ToSelectListItem(Model.ProcessId),
                    "Please select",
                    new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.ProcessId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ProcessStages, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(
                    model => model.ProcessStageId,
                    Model.ProcessStages.ToSelectListItem(Model.ProcessStageId),
                    "Please select",
                    new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.ProcessStageId, "", new { @class = "text-danger" })
        </div>
    </div>

    <!--Empty dropdownlist because this one is depending from the previous one, and will be filled by AJAX call-->
    @*<div class="form-group">
            @Html.LabelFor(model => model.ProcessStages, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select class="form-control" data-val="true" data-val-number="The field Process Stage must be a number." data-val-required="The Process Stage field is required." id="ProcessStageId" name="ProcessStageId"></select>
            </div>
        </div>*@

    <div class="form-group" id='datetimepicker1'>
        @Html.LabelFor(model => model.StartDate, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @class = "form-control", @type = "text" } })
            @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group" id='datetimepicker1'>
        @Html.LabelFor(model => model.EndDate, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.EndDate, new { htmlAttributes = new { @class = "form-control", @type = "text" } })
            @Html.ValidationMessageFor(model => model.EndDate, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.PercentComplete, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @if (Model.HasChild)
            {
                @Html.DisplayFor(model => model.PercentComplete)
            }
            else
            {
                @Html.EditorFor(model => model.PercentComplete, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PercentComplete, "", new { @class = "text-danger" })
            }
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ParentTaskId, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.ParentTaskId, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.ParentTaskId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Level, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Level, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Level, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group" hidden>
        @Html.LabelFor(model => model.SequenceNumber, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.SequenceNumber, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.SequenceNumber, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group" hidden>
        @Html.LabelFor(model => model.HasChild, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.HasChild, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.HasChild, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Explanation, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextArea("Explanation", new { @class = "form-control", @rows = "10" })
            @Html.ValidationMessageFor(model => model.Explanation, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.TaskTypes, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(
                    model => model.TaskTypeId,
                    Model.TaskTypes.ToSelectListItem(Model.TaskTypeId),
                    "Please select",
                    new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.TaskTypeId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" class="btn btn-default" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

<script type="text/javascript">

    $("#ProcessId").change(function () {
        console.log("Ajax call working....");

       fillDependentDropdownList();

    });


    function fillDependentDropdownList() {
        // code to be executed

            $.ajax({
            type: 'GET',
            url: '@Url.Action("GetProcessStages")',
            dataType: 'json',
            data: { id: $("#ProcessId").val() },
            success: function (ProcessStages) {
                console.log("We have data");
                $("#ProcessStageId").empty();
                // states contains the JSON formatted list
                // of states passed from the controller
                $.each(ProcessStages, function (i, ProcessStage) {
                    $("#ProcessStageId").append('<option value="'
                        + ProcessStage.Id + '"id=ProcessStage' + ProcessStage.Id + '>'
                        + ProcessStage.Description + '</option>');
                });
            },
            error: function (ex) {
                alert('Failed to retrieve process stateges for this process.' + ex);
            }
        });
        return false;
    }

    $('#StartDate,#EndDate').datetimepicker({
        format: 'd/m/Y',
        timepicker: false
    });

</script>

@model IEnumerable<Walnut.Entities.ProcessTaskTemplate>
@using Walnut.Extensions
@using Walnut.Models.CustomHTMLHelpers;
@{
    ViewBag.Title = "Index";
}

@if ((bool)Session["Filtered"] == true)
{
    <h3>@Model.FirstOrDefault().GetProcessDescription() Process - @Model.FirstOrDefault().GetProcessStageTemplateDescription() Tasks </h3>
}
else
{
    <h3>Process Tasks</h3>
}

<p>
    @Html.ActionLink("Create New", "Create")
</p>
<table class="table table-condensed" id="dataTable">
    <tr>
        <th>
            &nbsp;
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Id)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Description)
        </th>
        <th>
            %
        </th>
        @if ((bool)Session["Filtered"] == false)
        {
            <th>
                @*@Html.DisplayNameFor(model => model.ProcessId)*@
                @Html.DisplayNameFor(model => model.StartDate)
            </th>
            <th>
                @*@Html.DisplayNameFor(model => model.ProcessStageId)*@
                @Html.DisplayNameFor(model => model.EndDate)
            </th>
        }
        <th>
            @Html.DisplayNameFor(model => model.Level)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.ParentTaskId)
        </th>
        <th>
            sec
        </th>
        <th>
            Childs?
        </th>
    </tr>
    <tbody id="ProcessTaskTemplates">
        @foreach (var item in Model)
        {
        <tr class="dragableProcessTaskTemplateRow" id="@item.Id" value="@item.SequenceNumber">
            <td>
                <img src="~/Content/Images/drag_handle_48px.svg" width="15" height="15" />
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Id)
            </td>
            <td>
                @for (int i = 0; i < item.Level; i++)
                {

                    @Html.Raw(HttpUtility.HtmlDecode("<b>-</b>"))
                    //Code Block
                }
                @Html.DisplayFor(modelItem => item.Description)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.PercentComplete)
            </td>
            @if ((bool)Session["Filtered"] == false)
            {
                <td>
                    @*@item.GetProcessDescription()*@
                    @item.StartDate.ToString("MM/dd/yyyy")
                </td>
                <td>
                    @*@item.GetProcessStageTemplateDescription()*@
                    @item.EndDate.ToString("MM/dd/yyyy")
                </td>
            }
            <td>
                @item.Level
            </td>
            <td>
                @item.ParentTaskId
            </td>
            <td>
                @item.SequenceNumber
            </td>
            <td>
                @item.HasChild
            </td>
            <td>
                <a href="~/Admin/ProcessTaskTemplate/decreaseLevel/@item.Id"><img src="~/Content/Images/left-arrow.png" width="15" height="15" /></a>
            </td>
            <td>
                <a href="~/Admin/ProcessTaskTemplate/IncreaseLevel/@item.Id"><img src="~/Content/Images/StageIcon.png" width="15" height="15" /></a>
            </td>
            <td>
                @Html.CRUD_ActionLink("Edit", item.GetType().Name, "Edit", item.Id, true) &nbsp;
                @Html.CRUD_ActionLink("Details", item.GetType().Name, "Details", item.Id, true) &nbsp;
                @Html.CRUD_ActionLink("Delete", item.GetType().Name, "Delete", item.Id, true)
            </td>
        </tr>
        }

    </tbody>


</table>
@Scripts.Render("~/bundles/WalnutUIList")

@if ((bool)Session["Filtered"] == true)
{
    <div>
        @*@Html.ActionLink("Back to List", "Index")*@
        <a href="javascript:void(0);" onclick="history.go(-1);">Back</a>
    </div>

}

<script>
    // this script enables drag & drop
    $('#ProcessTaskTemplates').sortable({

        update: function (event, ui) {

            //aqui no tengo que hacer nada: leer la nueva secuencia desde la funcion ajax


            // first count table rows
            var rowsCount = $('.dragableProcessTaskTemplateRow').length;
            //its time to call our old chap AJAX....

            var DraggedElementId = ui.item.get(0).id;
            var newSequence = [];

            var i;
            var _processes = $('.dragableProcessTaskTemplateRow');
            for (i = 0; i < _processes.length; i++) {

                newSequence.push(_processes.get(i).id);

            }


            //AJAX call
            UpdateProcessTaskSequence(newSequence);

        }

    });
</script>



<script type="text/javascript">

    //Invoque this junction just in edit mode
    //$(function () {

    //    fillDependentDropdownList();

    //});

    //$("#ProcessId").change(function () {
    //    console.log("Ajax call working....");
    //    //$("#ProcessStageId").empty();

    //    fillDependentDropdownList();
    //});


    function UpdateProcessTaskSequence(sequenceArray) {
        // code to be executed

            $.ajax({
            type: 'POST',
            url: '@Url.Action("UpdateProccessTaskSequence")',
            //dataType: 'json', // if you uncoment this line you will get an error (!)...
            // cos AJAX will try to parse the successful 202 (Accepted) return code from the controller as JSON
            data: { ProcessTaskListToReorder: sequenceArray }, //here the array!!!
            success: function (ProcessStages) {
                console.log("We delivered the sequence");
            },
            error: function (request, status, error) {
                alert('Failed to delivery processes new squence.  ' + request.status);
            }
        });
        return false;
    }




</script>
